var searchIndex = {};
searchIndex["immutable_arena"] = {"doc":"","items":[[3,"Arena","immutable_arena","An `Arena&lt;T&gt;` is a container of objects of type `T` that, once allocated,\nlive as long as the containing arena. Within the arena, objects may refer\nto other objects using the `Ref&lt;&#39;arena, T&gt;` smart-pointer type. These\nobject references are allowed to form cycles. Once created, an object is\nimmutable. However, any `Ref&lt;&#39;arena, T&gt;` instances within the object may be\nset *exactly once*. The common usage pattern is to create objects and set\nall their refs before returning them to user code; the objects are\nsubsequently completely immutable.",null,null],[3,"Ref","","A `Ref&lt;&#39;arena, T&gt;` is a smart pointer type that may be used within an\narena-allocated type to hold a reference to another object within that arena.\nIt may be set exactly once, and is immutable thereafter. It dereferences only\nto a read-only borrow, never a mutable one.",null,null],[11,"new","","Create a new immutable-object arena.",0,{"inputs":[],"output":{"name":"arena"}}],[11,"alloc","","Allocate a new immutable object on the arena.",0,null],[11,"empty","","Create a new empty `Ref`. Dereferencing this reference before it is set\nwill panic. The reference may be set exactly once.",1,{"inputs":[],"output":{"name":"ref"}}],[11,"set","","Set the `Ref`. This may be done only once.",1,null],[11,"deref","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null]],"paths":[[3,"Arena"],[3,"Ref"]]};
initSearch(searchIndex);
